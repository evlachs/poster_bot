# –∏–º–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.exceptions import BotBlocked, BadRequest

import asyncio

# –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
from states import Form
from loader import dp, bot
from messages import MESSAGES
from conf import CHANNEL
from keyboards import make_a_post_keyboard, cancel_photo_keyboard, confirm_post_keyboard, photo_keyboard, \
    choose_a_post_keyboard


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã /start /help
@dp.message_handler(commands=['start', 'help'])
async def start_message(message: types.Message):
    await dp.bot.send_message(
        message.chat.id,
        MESSAGES['start'].format(message.from_user.username),
        reply_markup=make_a_post_keyboard
    )
    # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_id
    with open('data/users_id.txt', 'r+') as file:
        if not str(message.chat.id) in file.read().split('\n'):
            file.seek(0, 2)
            file.write(str(message.chat.id) + '\n')


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /cancel –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–µ –Ω–∞—á–∞—Ç–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['cancel'], state='*')
async def make_a_post_command(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    elif current_state in ['Form:title', 'Form:description', 'Form:photo']:
        await state.finish()
        await bot.send_message(message.from_user.id, MESSAGES['canceled'], reply_markup=make_a_post_keyboard)
    else:
        await state.finish()
        await bot.send_message(message.from_user.id, MESSAGES['canceled'])


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞
@dp.message_handler(state=Form.first_photo, content_types=['photo'])
async def set_post_photo_1(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
    if message.media_group_id:
        return
    async with state.proxy() as data:
        data['photo'] = [message.photo[-1].file_id]
    await bot.send_message(
        message.from_user.id,
        MESSAGES['next_photo'],
        reply_markup=photo_keyboard
    )
    await Form.second_photo.set()


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞
@dp.message_handler(state=Form.second_photo, content_types='photo')
async def set_post_photo_2(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
    if message.media_group_id:
        return
    async with state.proxy() as data:
        data['photo'].append(message.photo[-1].file_id)
    await bot.send_message(
        message.from_user.id,
        MESSAGES['next_photo'],
        reply_markup=photo_keyboard
    )
    await Form.third_photo.set()


# –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ–≥–æ –ø–æ—Å—Ç–∞
@dp.message_handler(state=Form.third_photo, content_types='photo')
async def set_post_photo_3(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—ã–ª–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ
    if message.media_group_id:
        return
    async with state.proxy() as data:
        data['photo'].append(message.photo[-1].file_id)
        photos_ids = data['photo']
        msg = data['message']
    photos = [types.InputMediaPhoto(photo) for photo in photos_ids]
    photos[0].caption = msg
    await bot.send_media_group(message.from_user.id, photos)
    await bot.send_message(message.from_user.id, MESSAGES['confirm_post'], reply_markup=confirm_post_keyboard)


# –ø—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –∏ —Ñ–∏–ª—Ç—Ä—É–µ–º –µ–≥–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ—Å—Ç–∞
@dp.message_handler(state=Form.description)
async def set_post_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if len(message.text) > 200:
            await bot.send_message(message.from_user.id, MESSAGES['too_long_message'])
            return
        data['message'] = data['message'].replace('description', message.text)
        await Form.first_photo.set()
        await bot.send_message(message.from_user.id, MESSAGES['set_photo'], reply_markup=cancel_photo_keyboard)


# —É–∑–Ω–∞–µ–º —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
@dp.message_handler(state=Form.work_time)
async def set_work_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = data['message'].replace('work_time', message.text)
    await Form.description.set()
    await bot.send_message(message.from_user.id, MESSAGES['ad_description'])


# —É–∑–Ω–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
@dp.message_handler(state=Form.organisation)
async def set_post_organisation(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = data['message'].replace('organisation', message.text)
    await Form.contacts.set()
    await bot.send_message(message.from_user.id, MESSAGES['set_contact'])


# —É–∑–Ω–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
@dp.message_handler(state=Form.contacts)
async def set_post_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = data['message'].replace('contact', message.text)
    # –µ—Å–ª–∏ –ø–æ—Å—Ç –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–æ–¥–∞–∂–∞–º, —Ç–æ –ø—Ä–æ—Å–∏–º —é–∑–µ—Ä–∞ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
    if '#–ø—Ä–æ–¥–∞–∂–∞' in data['message'] or '#–ø–æ–∫—É–ø–∫–∞' in data['message']:
        await Form.appeal_time.set()
        await bot.send_message(message.from_user.id, MESSAGES['set_appeal_time'])
        return
    elif '#—Ä–µ–∫–ª–∞–º–∞' in data['message']:
        await Form.work_time.set()
        await bot.send_message(message.from_user.id, MESSAGES['set_work_time'])
        return
    elif '#–≤–æ–ø—Ä–æ—Å' in data['message']:
        await Form.description.set()
        await bot.send_message(message.from_user.id, MESSAGES['question_description'])


# –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=Form.price)
async def set_post_price(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = data['message'].replace('price', message.text)
    await Form.contacts.set()
    await bot.send_message(message.from_user.id, MESSAGES['set_contact'])


@dp.message_handler(state=Form.sale)
async def set_sale(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = data['message'].replace('sale', message.text)
    await Form.price.set()
    await bot.send_message(message.from_user.id, MESSAGES['set_price'])


@dp.message_handler(state=Form.buy)
async def set_buy(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = data['message'].replace('buy', message.text)
    await Form.price.set()
    await bot.send_message(message.from_user.id, MESSAGES['set_price'])


@dp.message_handler(state=Form.appeal_time)
async def set_appeal_time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = data['message'].replace('appeal', message.text)
    await Form.description.set()
    if '#–ø–æ–∫—É–ø–∫–∞' in data['message']:
        await bot.send_message(message.from_user.id, MESSAGES['purchase_description'])
    elif '#—Ä–µ–∫–ª–∞–º–∞' in data['message']:
        await bot.send_message(message.from_user.id, MESSAGES['ad_description'])
    elif '#–ø—Ä–æ–¥–∞–∂–∞' in data['message']:
        await bot.send_message(message.from_user.id, MESSAGES['sale_description'])


@dp.message_handler(state=Form.question)
async def set_question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['message'] = data['message'].replace('question', message.text)
    await Form.contacts.set()
    await bot.send_message(message.from_user.id, MESSAGES['set_contact'])


@dp.message_handler(content_types=['new_chat_members', 'left_chat_member'])
async def del_welcome_message(message: types.Message):
    await bot.delete_message(message.chat.id, message.message_id)


async def delete_message(message: types.Message, time: int):
    await asyncio.sleep(time)
    await bot.delete_message(message.chat.id, message.message_id)


# –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –ø–æ—Å—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥ –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler()
async def make_a_post_command(message: types.Message, state: FSMContext):
    if message.chat.id != CHANNEL:
        its_not_chat = True
    else:
        its_not_chat = False

    if message.text in ['/post', 'üì¢ –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'] and its_not_chat:
        await bot.send_message(message.from_user.id, MESSAGES['choose_a_post'], reply_markup=choose_a_post_keyboard)
    elif message.text == '–ü—Ä–æ–¥–∞–∂–∞ üí≤' and its_not_chat:
        async with state.proxy() as data:
            data['message'] = '<b>üß≥ sale</b>\n\n' \
                              '<b>üí∞–¶–µ–Ω–∞:</b> price\n' \
                              '<b>üì±–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> contact\n' \
                              '<b>üïñ–í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> appeal\n\n' \
                              '<b>üìÑ–û–ø–∏—Å–∞–Ω–∏–µ:</b> description\n\n#–ø—Ä–æ–¥–∞–∂–∞'
        await Form.sale.set()
        await bot.send_message(message.from_user.id, MESSAGES['set_sale'])
    elif message.text == '–ü–æ–∫—É–ø–∫–∞ üõí' and its_not_chat:
        async with state.proxy() as data:
            data['message'] = '<b>üß≥ buy</b>\n\n' \
                              '<b>üí∞–¶–µ–Ω–∞:</b> price\n' \
                              '<b>üì±–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> contact\n' \
                              '<b>üïñ–í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> appeal\n\n' \
                              '<b>üìÑ–û–ø–∏—Å–∞–Ω–∏–µ:</b> description\n\n#–ø–æ–∫—É–ø–∫–∞'
            data['photo'] = None
        await Form.buy.set()
        await bot.send_message(message.from_user.id, MESSAGES['set_buy'])
    elif message.text == '–†–µ–∫–ª–∞–º–∞ üì∫' and its_not_chat:
        async with state.proxy() as data:
            data['message'] = '<b>üè´ organisation</b>\n\n' \
                              '<b>üì±–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> contact\n' \
                              '<b>üïñ–í—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> work_time\n\n' \
                              '<b>üìÑ–û–ø–∏—Å–∞–Ω–∏–µ:</b> description\n\n#—Ä–µ–∫–ª–∞–º–∞'
            data['photo'] = None
        await Form.organisation.set()
        await bot.send_message(message.from_user.id, MESSAGES['set_organisation'])
    elif message.text == '–í–æ–ø—Ä–æ—Å ‚ùì' and its_not_chat:
        async with state.proxy() as data:
            data['message'] = '<b>‚ùìquestion</b>\n' \
                              '<b>üì±–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> contact\n\n' \
                              '<b>üìÑ–û–ø–∏—Å–∞–Ω–∏–µ:</b> description\n\n#–≤–æ–ø—Ä–æ—Å'
            data['photo'] = None
        await Form.question.set()
        await bot.send_message(message.from_user.id, MESSAGES['set_question'])
    else:
        try:
            admins = await bot.get_chat_administrators(message.chat.id)
            admins_ids = [i.user.id for i in admins]
        except BadRequest:
            admins_ids = [message.from_user.id]
        if message.from_user.id not in admins_ids:
            await bot.delete_message(message.chat.id, message.message_id)
            try:
                await bot.send_message(message.from_user.id, MESSAGES['del_message'], reply_markup=make_a_post_keyboard)
            except BotBlocked:
                print('–ë–æ—Ç –Ω–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')
            except Exception as e:
                print(e)
            msg = await bot.send_message(message.chat.id, MESSAGES['auto_delete_message'])
            await delete_message(msg, 7)  # –∑–¥–µ—Å—å –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º (–ø–æ—Å–ª–µ msg) –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
